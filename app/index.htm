<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>

    <head lang="en">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta charset="UTF-8">
        <link rel="stylesheet" href="node_modules/leonardo-ui/dist/leonardo-ui.css" type="text/css" />
        <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css" type="text/css" />
        <link rel="stylesheet" href="public/style.css" type="text/css" />
        <link rel="shortcut icon" href="public/favicon.ico" type="image/x-icon">
        <script src="public/js/jquery/1.11.3/jquery.min.js"></script>
        <script src="node_modules/socket.io-client/dist/socket.io.min.js"></script>
        <title>Governed Metrics Service</title>
        <script type="text/javascript">
            var socket = io();

            socket.on("gms", function(msg) {
                var final = $('#statusOutput').val();
                $('#statusOutput').val(final + "\n" + JSON.stringify(msg));
                $('#statusOutput').scrollTop($('#statusOutput')[0].scrollHeight);
            });

            function testConnection() {
                //writeToStatus("\n\nTesting connection...");
                clearWindow();
                $.get("../masterlib/getdocid", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        //writeToStatus('\n...connection test successful.');
                    } else {
                        //writeToStatus('\n...connection test failed.');
                    }
                });
            };

            function reloadMetricsLibraryApp() {
                //writeToStatus('\n\nStarting metrics library reload...');
                $.post("../masterlib/reload", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        //writeToStatus('\n...' + result);
                    } else {
                        //writeToStatus('\n...reloading app failed.');
                    }
                });
            };

            function updateMetricsInApp() {
                //writeToStatus('\n\nUpdating metrics in all the apps...');
                $.post("../masterlib/update/all", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        // writeToStatus('\n...' + result);
                    } else {
                        //writeToStatus('\n...could not update metrics in app.');
                    }
                });
            };

            function reloadMetricsLibraryAndUpdateApps() {
                //writeToStatus("\n\nReloading metrics library and update apps started...");

                $.post("../masterlib/reload", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        if (result.startsWith("Task Completed in")) {
                            //          writeToStatus('\n...reloading app was successful, now updating the master library...');
                            $.post("../masterlib/update/all", function(result, strStatus, xhr) {
                                if (xhr.status == 200) {
                                    //                writeToStatus('\n...' + result);
                                } else {
                                    //              writeToStatus('\n...' + result);
                                }
                            });
                        } else {
                            //       writeToStatus('\n...reloading app failed.');
                        }
                    } else {
                        //  writeToStatus('\n...reloading app failed.');
                    }
                });
            };

            function deleteMetricsFromAnApp() {
                var appName = document.getElementById("textInput").value;
                //                writeToStatus('\n\nDeleting metrics from app: ' + appName + "...");
                var body = {
                    "appname": appName
                };
                $.post("../masterlib/delete/fromapp", body, function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        //                        writeToStatus('\n...deleting metrics was successful.');
                    } else {
                        //                        writeToStatus('\n...deleting metrics failed.');
                    }
                });
            };

            function clearWindow() {
                var textBox = document.getElementById("statusOutput");
                textBox.readOnly = false;
                textBox.value = "Status output:";
                //textBox.readOnly = true;


            };

            function getVersion() {
                $.get("../masterlib/version", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        $("#gmsTitle").text("Governed Metrics Service " + result);
                    }
                })
            };

            function getAppList() {
                $.get("../masterlib/getapplist", function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        $.each(result, function(key, value) {
                            $("#applist").append("<option value=" + value.id + ">" + value.name + "</option>");
                        })
                    }
                })
            }

            function getAppObjectList(id) {
                $("#appobjectlist thead tr").remove();
                $("#appobjectlist tbody tr").remove();
                var html = "";
                $.get("../masterlib/getappobjects/" + id, function(result, strStatus, xhr) {
                    if (xhr.status == 200) {
                        //lets build our table
                        //console.log(Object.keys(result[0]));
                        if (result.length == 0) {
                            $("#test").show();
                        } else {
                            //headers
                            html += "<thead><tr>";
                            Object.keys(result[0]).forEach(function(k) {
                                html += "<th>" + k + "</th>";
                            });

                            html += "</tr></thead>";
                            html += "<tbody>";
                            //data
                            result.forEach(function(item) {
                                html += "<tr>"
                                for (var key in item) {
                                    if (item.hasOwnProperty(key)) {
                                        if (key == "gmsTag") {
                                            if (item[key].length == 0) {
                                                html += "<td></td>";

                                            } else {
                                                item[key].forEach(function(item) {
                                                    if (item.name == "gms") {
                                                        html += "<td>" + item.name + "</td>";
                                                    }
                                                })
                                            }
                                        } else {
                                            html += "<td>" + item[key] + "</td>";
                                        }

                                    }
                                }
                                html += "</tr>"
                            })


                            html += "</tbody>";
                            $("#appobjectlist").append(html);
                        }




                        // $.each(result, function(key, value) {
                        //     
                        // });

                        // 
                        // console.log(html);
                        // 
                    }
                })
            }

            $(document).ready(function() {
                $("#applist").on("change", function() {
                    $("#test").hide();
                    var id = $("#applist option:selected").attr("value");
                    getAppObjectList(id);
                });

                $("#advancedMode").click(function() {
                    $("#lookup-table").toggle();
                })

                // This must be a hyperlink
                $(".export").on('click', function(event) {
                    // CSV
                    var args = [$('#tableparent>table'), 'export.csv'];

                    exportTableToCSV.apply(this, args);

                    // If CSV, don't do event.preventDefault() or return false
                    // We actually need this to be a typical hyperlink
                });

            });

            function exportTableToCSV($table, filename) {

                var $headers = $table.find('tr:has(th)');
                var $rows = $table.find('tr:has(td)'),

                    // Temporary delimiter characters unlikely to be typed by keyboard
                    // This is to avoid accidentally splitting the actual contents
                    tmpColDelim = String.fromCharCode(11), // vertical tab character
                    tmpRowDelim = String.fromCharCode(0), // null character

                    // actual delimiter characters for CSV format
                    colDelim = '","',
                    rowDelim = '"\r\n"',

                    header = '"' + $headers.map(function(i, row) {
                        var $row = $(row),
                            $cols = $row.find('th');

                        return $cols.map(function(j, col) {
                            var $col = $(col),
                                text = $col.text();

                            return text.replace(/"/g, '""'); // escape double quotes

                        }).get().join(tmpColDelim);

                    }).get().join(tmpRowDelim)
                    .split(tmpRowDelim).join(rowDelim)
                    .split(tmpColDelim).join(colDelim) + '"',

                    // Grab text from table into CSV formatted string
                    csv = '"' + $rows.map(function(i, row) {
                        var $row = $(row),
                            $cols = $row.find('td');

                        return $cols.map(function(j, col) {
                            var $col = $(col),
                                text = $col.text();

                            return text.replace(/"/g, '""'); // escape double quotes

                        }).get().join(tmpColDelim);

                    }).get().join(tmpRowDelim)
                    .split(tmpRowDelim).join(rowDelim)
                    .split(tmpColDelim).join(colDelim) + '"';

                var final = header + "\r\n" + csv;

                // Deliberate 'false', see comment below
                if (false && window.navigator.msSaveBlob) {

                    var blob = new Blob([decodeURIComponent(final)], {
                        type: 'text/csv;charset=utf8'
                    });

                    // Crashes in IE 10, IE 11 and Microsoft Edge
                    // See MS Edge Issue #10396033: https://goo.gl/AEiSjJ
                    // Hence, the deliberate 'false'
                    // This is here just for completeness
                    // Remove the 'false' at your own risk
                    window.navigator.msSaveBlob(blob, filename);

                } else if (window.Blob && window.URL) {
                    // HTML5 Blob        
                    var blob = new Blob([final], {
                        type: 'text/csv;charset=utf8'
                    });
                    var csvUrl = URL.createObjectURL(blob);

                    $(this)
                        .attr({
                            'download': filename,
                            'href': csvUrl
                        });
                } else {
                    // Data URI
                    var csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(final);

                    $(this)
                        .attr({
                            'download': filename,
                            'href': csvData,
                            'target': '_blank'
                        });
                }
            }

            function doSetup() {
                $("#test").hide();
                getVersion();
                getAppList();
            }
        </script>
    </head>

    <body onload="doSetup()">
        <def>
        </def>
        <div id="header" class="frame">
            <div id="header-text">
                <h1 id="gmsTitle" style="color: #FFFFFF; font-size: 23pt; font-weight: bold; font-family: Arial;">Governed Metrics Service</h1>
            </div>
        </div>

        <div id="main-body">
            <div id="importantMessage" class="lui-bg-info labels"><strong><p>GMS 2.0 introduced new fields required for proper operation.  Please review the documentation here: <span><a href="docs/user-guide/app/#general" style="color:greenyellow">General Configuration</a></span></p></strong></div>
            <div>
                <div id="left-buttons">
                    <button class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="testConnection()">Test Connection</button>
                    <br/>
                    <button class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="reloadMetricsLibraryApp()">Reload Metrics Library App</button>
                    <br/>
                    <button class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="updateMetricsInApp()">Update Metrics in Apps</button>
                    <br/>
                    <button class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="reloadMetricsLibraryAndUpdateApps()">Reload Metrics Library and Update Apps</button>
                    <br/>
                    <button class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="deleteMetricsFromAnApp()">Delete Metrics from an App</button>
                </div>
                <div id=right-status>
                    <button id="clear-window-button" class="lui-button  lui-button--toolbar-inverse button-spacing" onclick="clearWindow()">Clear Status Window</button>
                    <div class="lui-bg-default">
                        <textarea id="statusOutput" class="lui-textarea lui-text-default textbox-output"></textarea>
                    </div>
                    <br/>
                    <div class="lui-bg-default">
                        <label class="labels" for="textInput">Enter the Qlik Sense application name here:</label>
                        <input class="lui-input" id="textInput">
                    </div>
                </div>
            </div>

        </div>
        <div id="metric-lookup" class="frame">
            <div style="display:inline;float:left">
                <div id="adv" class="lui-switch">
                    <label class="lui-switch__label" id="advancedLabel">
                <input id="advancedMode" type="checkbox" class="lui-switch__checkbox" aria-label="Advanced Mode">
                <span class="lui-switch__wrap">
                    <span class="lui-switch__inner"></span>
                    <span class="lui-switch__switch"></span>
                </span>
                </label>
                </div>
            </div>
            <div style="display:inline;margin-left:5px">
                <label>Toggle Master Library Search</label>
            </div>
            <div id="lookup-table" style="display:none;">
                <h3>Have master library items you want to incorporate into GMS? Search for them here.</h3>
                <div style="display:inline;">
                    <select id="applist" class="lui-select"></select>
                    <a href="#" class="export"><span><button class="lui-button">Export table to csv file</button></span>
                    </a>
                </div>
                <p id="test">No master library dimensions and measures found in this app.</p>
                <div id="tableparent" class="table-responsive">
                    <table id="appobjectlist" class="table table-bordered">

                    </table>
                </div>
            </div>

        </div>
        <div id="tablesection" class="frame">

        </div>

        <script type="text/javascript">
            $(document).ready(function() {
                clearWindow();
                document.getElementById("textInput").value = "<enter app name here>";
            });
        </script>
        <script src="node_modules/leonardo-ui/dist/leonardo-ui.js"></script>

    </body>

</html>